"use client";
// Ï±ÑÎÑê ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ
import React, { useState, useEffect, useMemo } from "react";
import {
  Box,
  Typography,
  Card,
  CardContent,
  Button,
  Avatar,
  Chip,
  Tab,
  Tabs,
  IconButton,
  useTheme,
  FormControl,
  Select,
  MenuItem,
  SelectChangeEvent,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  InputAdornment,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Divider,
} from "@mui/material";
import {
  PersonAdd as PersonAddIcon,
  Notifications as NotificationsIcon,
  NotificationsOff as NotificationsOffIcon,
  Create as CreateIcon,
  Star as StarIcon,
  People as PeopleIcon,
  Article as ArticleIcon,
  TrendingUp as TrendingUpIcon,
  ViewList as ViewListIcon,
  ViewModule as ViewModuleIcon,
  EmojiEvents as EmojiEventsIcon,
  Verified as VerifiedIcon,
  Person as PersonIcon,
  Edit as EditIcon,
  Announcement as AnnouncementIcon,
  FiberNew as FiberNewIcon,
  Chat as ChatIcon,
  Send as SendIcon,
  Close as CloseIcon,
} from "@mui/icons-material";
import { useRouter, useParams } from "next/navigation";
import { useQuery, useMutation, useQueryClient, keepPreviousData } from "@tanstack/react-query";
import { useSession } from "next-auth/react";
import { useMessage } from "@/app/store/messageStore";
import usePageStore from "@/app/store/pageStore";
import { useSubscriptionStore } from "@/app/store/subscriptionStore";
import { useChannelNotificationStore } from "@/app/store/channelNotificationStore";
import { TABLE_VIEW_COUNT } from "@/app/const/VIEW_COUNT";
import { TAB_SELECT_OPTIONS } from "@/app/const/WRITE_CONST";
import CustomizedTables from "@/app/components/table/CustomizedTables";
import CustomizedCardView from "@/app/components/table/CustomizedCardView";
import Pagination from "@/app/components/common/Pagination";
import SearchBar from "@/app/components/common/SearchBar";
import Loading from "@/app/components/common/Loading";
import ErrorView from "@/app/components/common/ErrorView";
// API Ìï®ÏàòÎì§ import
import { getChannel, getChannelBySlug, subscribeChannel, unsubscribeChannel, Channel } from "@/app/api/channelsApi";
// Í∏∞Ï°¥ Ïª§Ïä§ÌÖÄ ÌõÖÎì§ import
import { useStories } from "@/app/components/api/useStories";
import { useCardStories } from "@/app/components/api/useCardStories";

// Ï±ÑÌåÖ API import
import {
  getChannelChatMessages,
  sendChannelChatMessage,
  joinChannelChat,
  leaveChannelChat,
  ChannelChatMessage,
  ChannelChatResponse,
} from "@/app/api/channelChatApi";

// ÏõπÏÜåÏºì import
import { ChannelChatWebSocket, WebSocketStatus } from "@/app/utils/websocket";

const ChannelDetailPage = () => {
  const theme = useTheme();
  const router = useRouter();
  const params = useParams();
  const channelSlug = params?.slug as string;
  const { data: session } = useSession();
  const { showMessage } = useMessage();
  const queryClient = useQueryClient();
  const { currentPage, setCurrentPage } = usePageStore();
  const {
    isSubscribed: checkIsSubscribed,
    addSubscription,
    removeSubscription,
    loadSubscriptions,
  } = useSubscriptionStore();

  const { subscribeToChannel, unsubscribeFromChannel, isSubscribedToNotifications } = useChannelNotificationStore();

  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [currentTab, setCurrentTab] = useState("all");
  const [viewMode, setViewMode] = useState<"table" | "card">("table");
  const [sortOrder, setSortOrder] = useState<"recent" | "view" | "recommend">("recent");
  const [recommendRankingMode, setRecommendRankingMode] = useState(false);
  const [searchParamsState, setSearchParamsState] = useState<{ type: string; query: string } | null>(null);
  const [showChannelInfo, setShowChannelInfo] = useState(false);
  const [showNotice, setShowNotice] = useState(false);
  const [showUnsubscribeConfirm, setShowUnsubscribeConfirm] = useState(false);
  const [showChat, setShowChat] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChannelChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [wsConnection, setWsConnection] = useState<ChannelChatWebSocket | null>(null);
  const [wsStatus, setWsStatus] = useState<WebSocketStatus>("disconnected");
  const [isLoadingMessages, setIsLoadingMessages] = useState(false);
  const [typingUsers, setTypingUsers] = useState<{ id: string; nickname: string }[]>([]);
  const [onlineUsers, setOnlineUsers] = useState<{ id: string; nickname: string }[]>([]);

  const viewCount = TABLE_VIEW_COUNT;

  // Ï±ÑÎÑê Ï†ïÎ≥¥ Ï°∞Ìöå (Î®ºÏ†Ä slugÎ°ú Ï±ÑÎÑê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞)
  const {
    data: channelData,
    isLoading: channelLoading,
    isError: channelError,
    error: channelApiError,
  } = useQuery<Channel>({
    queryKey: ["channel", channelSlug],
    queryFn: () => getChannelBySlug(channelSlug),
    enabled: !!channelSlug,
    staleTime: 1000 * 60 * 5, // 5Î∂ÑÍ∞Ñ Ï∫êÏãú
    retry: 2,
  });

  // Ï±ÑÎÑê ID Í∞ÄÏ†∏Ïò§Í∏∞ (Ï±ÑÎÑê Îç∞Ïù¥ÌÑ∞Í∞Ä Î°úÎìúÎêú ÌõÑ)
  const channelId = channelData?.id || 0;

  console.log("üîç Ï±ÑÎÑê ÌéòÏù¥ÏßÄ ÏÉÅÌÉú:", {
    channelSlug,
    channelData,
    channelId,
    channelLoading,
    channelError,
  });

  // ÌòÑÏû¨ Ï±ÑÎÑêÏùò Íµ¨ÎèÖ ÏÉÅÌÉú
  const isSubscribed = checkIsSubscribed(channelId);

  // ÌòÑÏû¨ Ï±ÑÎÑêÏùò ÏïåÎ¶º Íµ¨ÎèÖ ÏÉÅÌÉú
  const isNotificationEnabled = isSubscribedToNotifications(channelId);

  // URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî (MainView Î∞©Ïãù)
  useEffect(() => {
    if (typeof window !== "undefined") {
      const urlParams = new URLSearchParams(window.location.search);

      // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï¥àÍ∏∞Ìôî
      const categoryParam = urlParams.get("category");
      if (categoryParam) {
        setCurrentTab(categoryParam);
      }

      // Î∑∞ Î™®Îìú Ï¥àÍ∏∞Ìôî
      const viewModeParam = urlParams.get("viewMode");
      if (viewModeParam === "card") {
        setViewMode("card");
      }

      // Ï∂îÏ≤ú Îû≠ÌÇπ Î™®Îìú Ï¥àÍ∏∞Ìôî
      const recommendRankingParam = urlParams.get("recommendRanking");
      if (recommendRankingParam === "true") {
        setRecommendRankingMode(true);
      }

      // Ï†ïÎ†¨ ÏàúÏÑú Ï¥àÍ∏∞Ìôî
      const sortOrderParam = urlParams.get("sortOrder");
      if (sortOrderParam && ["recent", "view", "recommend"].includes(sortOrderParam)) {
        setSortOrder(sortOrderParam as "recent" | "view" | "recommend");
      }

      // ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî - URLÏóê ÌéòÏù¥ÏßÄ ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ 1Î°ú ÏÑ§Ï†ï
      const pageParam = urlParams.get("page");
      const pageNumber = pageParam ? Number(pageParam) : 1;
      setCurrentPage(pageNumber);

      // Í≤ÄÏÉâ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      const searchType = urlParams.get("searchType");
      const searchQuery = urlParams.get("searchQuery");
      if (searchType && searchQuery) {
        setSearchParamsState({ type: searchType, query: searchQuery });
      }
    }
  }, [channelSlug, setCurrentPage]); // channelSlug ÏùòÏ°¥ÏÑ± Ï∂îÍ∞Ä

  // Ï±ÑÎÑê ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Í∏∞Ï°¥ Ïª§Ïä§ÌÖÄ ÌõÖ ÏÇ¨Ïö©)
  const {
    data: tableData,
    error: tableError,
    isLoading: tableLoading,
  } = useStories({
    category: currentTab,
    currentPage,
    searchParamsState,
    recommendRankingMode,
    viewCount,
    viewMode,
    channelId, // Ï±ÑÎÑê ID Ï∂îÍ∞Ä
  });

  // Ï±ÑÎÑê Ïπ¥Îìú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Í∏∞Ï°¥ Ïª§Ïä§ÌÖÄ ÌõÖ ÏÇ¨Ïö©)
  const {
    data: cardData,
    error: cardError,
    isLoading: cardLoading,
  } = useCardStories({
    category: currentTab,
    currentPage,
    searchParamsState,
    recommendRankingMode,
    viewCount,
    viewMode,
    channelId, // Ï±ÑÎÑê ID Ï∂îÍ∞Ä
  });

  // MainView Ïä§ÌÉÄÏùºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
  const currentData = viewMode === "card" ? cardData : tableData;
  const currentError = viewMode === "card" ? cardError : tableError;
  const currentLoading = viewMode === "card" ? cardLoading : tableLoading;
  const currentTotal = currentData?.total || 0;

  // Íµ¨ÎèÖ mutation
  const subscribeMutation = useMutation({
    mutationFn: subscribeChannel,
    onSuccess: () => {
      if (channelData) {
        addSubscription(channelData);
      }
      showMessage("Ï±ÑÎÑêÏùÑ Íµ¨ÎèÖÌñàÏäµÎãàÎã§!", "success");
      queryClient.invalidateQueries({ queryKey: ["channel", channelId] });
    },
    onError: (error: any) => {
      console.error("Íµ¨ÎèÖ Ïã§Ìå®:", error);
      showMessage(error.response?.data?.message || "Íµ¨ÎèÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
    },
  });

  // Íµ¨ÎèÖ Ï∑®ÏÜå mutation
  const unsubscribeMutation = useMutation({
    mutationFn: unsubscribeChannel,
    onSuccess: () => {
      removeSubscription(channelId);
      showMessage("Ï±ÑÎÑê Íµ¨ÎèÖÏùÑ Ï∑®ÏÜåÌñàÏäµÎãàÎã§.", "info");
      queryClient.invalidateQueries({ queryKey: ["channel", channelId] });
    },
    onError: (error: any) => {
      console.error("Íµ¨ÎèÖ Ï∑®ÏÜå Ïã§Ìå®:", error);
      showMessage(error.response?.data?.message || "Íµ¨ÎèÖ Ï∑®ÏÜåÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
    },
  });

  // ÏóêÎü¨ Ï≤òÎ¶¨
  useEffect(() => {
    if (channelError) {
      console.error("Ï±ÑÎÑê Ï°∞Ìöå Ïã§Ìå®:", channelApiError);
      showMessage("Ï±ÑÎÑêÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
    }
    if (currentError) {
      console.error("Í≤åÏãúÍ∏Ä Ï°∞Ìöå Ïã§Ìå®:", currentError);
      showMessage("Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
    }
  }, [channelError, currentError, channelApiError, showMessage]);

  // Ï¥àÍ∏∞ ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï - channelIdÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßå URLÏóê ÌéòÏù¥ÏßÄ ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå 1Î°ú ÏÑ§Ï†ï
  useEffect(() => {
    if (channelId && typeof window !== "undefined") {
      const urlParams = new URLSearchParams(window.location.search);
      const pageParam = urlParams.get("page");

      // URLÏóê ÌéòÏù¥ÏßÄ ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå 1Î°ú ÏÑ§Ï†ï
      if (!pageParam) {
        setCurrentPage(1);
      }
    }
  }, [channelId, setCurrentPage]);

  // Íµ¨ÎèÖ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    loadSubscriptions();
  }, [loadSubscriptions]);

  // ÌÉ≠ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨ (MainView Î∞©Ïãù Ï†ÅÏö©)
  const handleTabChange = (event: React.SyntheticEvent, newValue: string) => {
    // ÏÑ†ÌÉùÌïú ÌÉ≠ Í∞í ÏóÖÎç∞Ïù¥Ìä∏
    setCurrentTab(newValue);
    // ÌéòÏù¥ÏßÄ Î≤àÌò∏ Ï¥àÍ∏∞Ìôî
    setCurrentPage(1);

    // URL ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Íµ¨ÏÑ±
    const params = new URLSearchParams();
    params.set("category", newValue);

    // Í≤ÄÏÉâ ÏÉÅÌÉúÍ∞Ä ÏûàÏúºÎ©¥ URLÏóê Ïú†ÏßÄ
    if (searchParamsState) {
      params.set("searchType", searchParamsState.type);
      params.set("searchQuery", searchParamsState.query);
    }

    // Ï∂îÏ≤ú Îû≠ÌÇπ Î™®Îìú ÏÉÅÌÉú Ïú†ÏßÄ
    params.set("recommendRanking", recommendRankingMode.toString());

    // ÌòÑÏû¨ Î∑∞ Î™®Îìú ÏÉÅÌÉú Ïú†ÏßÄ
    params.set("viewMode", viewMode);

    // Ï†ïÎ†¨ ÏàúÏÑú Ïú†ÏßÄ
    params.set("sortOrder", sortOrder);

    // URL ÏóÖÎç∞Ïù¥Ìä∏
    router.push(`/channels/${channelSlug}?${params.toString()}`, { scroll: false });
  };

  // Íµ¨ÎèÖ ÌÜ†Í∏Ä Ìï∏Îì§Îü¨
  const handleSubscribeToggle = () => {
    if (!session?.user) {
      showMessage("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.", "warning");
      return;
    }

    if (isSubscribed) {
      setShowUnsubscribeConfirm(true);
    } else {
      subscribeMutation.mutate(channelId);
    }
  };

  // Íµ¨ÎèÖ Ï∑®ÏÜå ÌôïÏù∏ Ìï∏Îì§Îü¨
  const handleUnsubscribeConfirm = () => {
    unsubscribeMutation.mutate(channelId);
    setShowUnsubscribeConfirm(false);
  };

  // Íµ¨ÎèÖ Ï∑®ÏÜå Ï∑®ÏÜå Ìï∏Îì§Îü¨
  const handleUnsubscribeCancel = () => {
    setShowUnsubscribeConfirm(false);
  };

  // Ï±ÑÎÑê ÏïåÎ¶º Íµ¨ÎèÖ mutation
  const notificationSubscribeMutation = useMutation({
    mutationFn: async () => {
      const { subscribeToChannelNotifications } = await import("@/app/api/channelNotificationApi");
      return subscribeToChannelNotifications(channelId);
    },
    onSuccess: () => {
      if (channelData) {
        subscribeToChannel(channelId, channelData.channel_name, channelData.slug);
      }
      showMessage("Ï±ÑÎÑê ÏïåÎ¶ºÏùÑ Ïº∞ÏäµÎãàÎã§!", "success");
    },
    onError: (error: any) => {
      console.error("Ï±ÑÎÑê ÏïåÎ¶º Íµ¨ÎèÖ Ïã§Ìå®:", error);
      showMessage(error.response?.data?.message || "Ï±ÑÎÑê ÏïåÎ¶º Íµ¨ÎèÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
    },
  });

  // Ï±ÑÎÑê ÏïåÎ¶º Íµ¨ÎèÖ Ìï¥Ï†ú mutation
  const notificationUnsubscribeMutation = useMutation({
    mutationFn: async () => {
      const { unsubscribeFromChannelNotifications } = await import("@/app/api/channelNotificationApi");
      return unsubscribeFromChannelNotifications(channelId);
    },
    onSuccess: () => {
      unsubscribeFromChannel(channelId);
      showMessage("Ï±ÑÎÑê ÏïåÎ¶ºÏùÑ ÎÅùÏäµÎãàÎã§.", "info");
    },
    onError: (error: any) => {
      console.error("Ï±ÑÎÑê ÏïåÎ¶º Íµ¨ÎèÖ Ìï¥Ï†ú Ïã§Ìå®:", error);
      showMessage(error.response?.data?.message || "Ï±ÑÎÑê ÏïåÎ¶º Íµ¨ÎèÖ Ìï¥Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
    },
  });

  // ÏïåÎ¶º ÌÜ†Í∏Ä Ìï∏Îì§Îü¨
  const handleNotificationToggle = () => {
    if (!session?.user) {
      showMessage("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.", "warning");
      return;
    }

    if (!channelData) {
      showMessage("Ï±ÑÎÑê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.", "warning");
      return;
    }

    if (isNotificationEnabled) {
      notificationUnsubscribeMutation.mutate();
    } else {
      notificationSubscribeMutation.mutate();
    }
  };

  // Í≤åÏãúÍ∏Ä ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handlePostClick = (postId: number) => {
    // ÌòÑÏû¨ Ï±ÑÎÑê ÌéòÏù¥ÏßÄ URLÏùÑ ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
    if (typeof window !== "undefined") {
      sessionStorage.setItem("previousMainPageUrl", window.location.href);
    }
    router.push(`/channels/${channelSlug}/detail/story/${postId}`);
  };

  // Í∏ÄÏì∞Í∏∞ Ìï∏Îì§Îü¨
  const handleWritePost = () => {
    if (!session?.user) {
      showMessage("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.", "warning");
      return;
    }
    if (!channelId || channelId === 0) {
      showMessage("Ï±ÑÎÑê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.", "warning");
      return;
    }
    router.push(`/write/story?channel=${channelId}`);
  };

  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ìï∏Îì§Îü¨ (URL ÏóÖÎç∞Ïù¥Ìä∏ Ìè¨Ìï®)
  const handlePageClick = (selectedItem: { selected: number }) => {
    const newPage = selectedItem.selected + 1;
    setCurrentPage(newPage);

    // Í∏∞Ï°¥ ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞Îì§ÏùÑ Ïú†ÏßÄÌïòÎ©¥ÏÑú ÌéòÏù¥ÏßÄ Î≤àÌò∏Îßå ÏóÖÎç∞Ïù¥Ìä∏
    const params = new URLSearchParams(window.location.search);
    params.set("page", newPage.toString());

    router.push(`/channels/${channelSlug}?${params.toString()}`, { scroll: false });
  };

  // Ï†ïÎ†¨ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨ (URL ÏóÖÎç∞Ïù¥Ìä∏ Ìè¨Ìï®)
  const handleSortChange = (event: SelectChangeEvent<"recent" | "view" | "recommend">) => {
    const newSortOrder = event.target.value as "recent" | "view" | "recommend";
    setSortOrder(newSortOrder);

    // ÌòÑÏû¨ URL ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const params = new URLSearchParams(window.location.search);
    // sortOrder ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÍ∞Ä ÎòêÎäî ÏóÖÎç∞Ïù¥Ìä∏
    params.set("sortOrder", newSortOrder);
    // URL ÏóÖÎç∞Ïù¥Ìä∏
    router.push(`/channels/${channelSlug}?${params.toString()}`, { scroll: false });
  };

  // Ï∂îÏ≤ú Îû≠ÌÇπ ÌÜ†Í∏Ä (URL ÏóÖÎç∞Ïù¥Ìä∏ Ìè¨Ìï®)
  const toggleRecommendRanking = () => {
    const newMode = !recommendRankingMode;
    setRecommendRankingMode(newMode);
    setCurrentPage(1);

    // URL ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Íµ¨ÏÑ±
    const params = new URLSearchParams();
    params.set("category", currentTab);

    if (searchParamsState) {
      params.set("searchType", searchParamsState.type);
      params.set("searchQuery", searchParamsState.query);
    }

    params.set("recommendRanking", newMode.toString());
    params.set("viewMode", viewMode);
    params.set("sortOrder", sortOrder);

    router.push(`/channels/${channelSlug}?${params.toString()}`, { scroll: false });
  };

  // Í≤ÄÏÉâ Ìï∏Îì§Îü¨ (URL ÏóÖÎç∞Ïù¥Ìä∏ Ìè¨Ìï®)
  const handleSearch = ({ category, query }: { category: string; query: string }) => {
    setSearchParamsState({ type: category, query });
    setCurrentPage(1);

    const params = new URLSearchParams();
    params.set("category", currentTab);
    params.set("searchType", category);
    params.set("searchQuery", query);
    params.set("recommendRanking", recommendRankingMode.toString());
    params.set("viewMode", viewMode);
    params.set("sortOrder", sortOrder);

    router.push(`/channels/${channelSlug}?${params.toString()}`, { scroll: false });
  };

  // Í≤ÄÏÉâ Ï¥àÍ∏∞Ìôî (URL ÏóÖÎç∞Ïù¥Ìä∏ Ìè¨Ìï®)
  const handleClearSearch = () => {
    setSearchParamsState(null);
    setCurrentPage(1);

    const params = new URLSearchParams();
    params.set("category", currentTab);
    params.set("recommendRanking", recommendRankingMode.toString());
    params.set("viewMode", viewMode);
    params.set("sortOrder", sortOrder);

    router.push(`/channels/${channelSlug}?${params.toString()}`, { scroll: false });
  };

  // Î∑∞ Î™®Îìú Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨ (URL ÏóÖÎç∞Ïù¥Ìä∏ Ìè¨Ìï®)
  const handleViewModeChange = (mode: "table" | "card") => {
    setViewMode(mode);

    // Í∏∞Ï°¥ URLÏùò ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞Î•º Ïú†ÏßÄÌïòÍ≥†, viewMode ÏóÖÎç∞Ïù¥Ìä∏
    const params = new URLSearchParams(window.location.search);
    params.set("viewMode", mode);

    router.push(`/channels/${channelSlug}?${params.toString()}`, { scroll: false });
  };

  // Íµ¨ÎèÖÏûê Ïàò Ìè¨Îß∑ÌåÖ
  const formatSubscriberCount = (count: number) => {
    if (count >= 1000000) {
      return `${(count / 1000000).toFixed(1)}M`;
    } else if (count >= 1000) {
      return `${(count / 1000).toFixed(1)}K`;
    }
    return count.toString();
  };

  // Ï†ïÎ†¨Îêú ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞
  const sortedTableData = useMemo(() => {
    if (!currentData) return [];
    return [...currentData.results]
      .sort((a, b) => {
        if (sortOrder === "view") {
          return b.read_count - a.read_count;
        } else if (sortOrder === "recommend") {
          return b.recommend_Count - a.recommend_Count;
        }
        return 0;
      })
      .map((item) => ({
        ...item,
        isRecommendRanking: recommendRankingMode,
      }));
  }, [currentData, sortOrder, recommendRankingMode]);

  // Ï±ÑÎÑê Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå
  const {
    data: channelNoticesData,
    isLoading: noticesLoading,
    isError: noticesError,
  } = useQuery({
    queryKey: ["channelNotices", channelId],
    queryFn: async () => {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_BASE_URL}/api/story/notices?channel=${channelId}&limit=20`
      );
      if (!response.ok) {
        throw new Error("Failed to fetch notices");
      }
      return response.json();
    },
    enabled: !!channelId && showNotice,
    staleTime: 1000 * 60 * 5, // 5Î∂ÑÍ∞Ñ Ï∫êÏãú
  });

  const channelNotices = channelNoticesData?.results || [];

  // Í≥µÏßÄÏÇ¨Ìï≠ Í¥ÄÎ†® Ìó¨Ìçº Ìï®ÏàòÎì§
  const isNewNotice = (createdAt: string) => {
    const noticeDate = new Date(createdAt);
    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
    return noticeDate > threeDaysAgo;
  };

  const truncateTitle = (title: string, maxLength: number = 35) => {
    return title.length > maxLength ? `${title.substring(0, maxLength)}...` : title;
  };

  const handleNoticeClick = (noticeId: number) => {
    router.push(`/channels/${channelSlug}/detail/suggestion/${noticeId}`);
    setShowNotice(false);
  };

  const handleWriteNotice = () => {
    if (!session?.user) {
      showMessage("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.", "warning");
      return;
    }
    if (!channelId || channelId === 0) {
      showMessage("Ï±ÑÎÑê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.", "warning");
      return;
    }
    router.push(`/write/notice?channel=${channelId}`);
    setShowNotice(false);
  };

  // Ï±ÑÌåÖ ÌÜ†Í∏Ä Ìï∏Îì§Îü¨
  const handleChatToggle = () => {
    if (!session?.user) {
      showMessage("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.", "warning");
      return;
    }

    if (showChat) {
      // Ï±ÑÌåÖ Ï¢ÖÎ£å - ÏõπÏÜåÏºì Ïó∞Í≤∞ Ìï¥Ï†ú
      disconnectWebSocket();
      setShowChat(false);
    } else {
      // Ï±ÑÌåÖ ÏãúÏûë - Î©îÏãúÏßÄ Î°úÎìú Î∞è ÏõπÏÜåÏºì Ïó∞Í≤∞
      setShowChat(true);
      loadChatMessages();
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÏõπÏÜåÏºì Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      disconnectWebSocket();
    };
  }, []);

  // Ï±ÑÎÑê Î≥ÄÍ≤Ω Ïãú ÏõπÏÜåÏºì Ïû¨Ïó∞Í≤∞
  useEffect(() => {
    if (showChat && channelId && wsConnection) {
      disconnectWebSocket();
      loadChatMessages();
    }
  }, [channelId]);

  // Ï±ÑÌåÖ Î©îÏãúÏßÄ Î°úÎìú Î∞è ÏõπÏÜåÏºì Ïó∞Í≤∞
  const loadChatMessages = async () => {
    if (!channelId || !session?.user) return;

    setIsLoadingMessages(true);

    try {
      // APIÎ°ú Í∏∞Ï°¥ Ï±ÑÌåÖ Î©îÏãúÏßÄ Î°úÎìú
      console.log("üì• Ï±ÑÌåÖ Î©îÏãúÏßÄ Î°úÎìú ÏãúÏûë");
      const response = await getChannelChatMessages(channelId, 1, 50);
      setChatMessages(response.messages);

      // Ï±ÑÎÑê ÏûÖÏû• ÏïåÎ¶º
      await joinChannelChat(channelId);

      // ÏõπÏÜåÏºì Ïó∞Í≤∞ ÏÑ§Ï†ï
      if (!wsConnection) {
        setupWebSocketConnection();
      }

      console.log("‚úÖ Ï±ÑÌåÖ Î°úÎìú ÏôÑÎ£å:", response.messages.length, "Í∞ú Î©îÏãúÏßÄ");
    } catch (error) {
      console.error("‚ùå Ï±ÑÌåÖ Î©îÏãúÏßÄ Î°úÎìú Ïã§Ìå®:", error);
      showMessage("Ï±ÑÌåÖÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");

      // ÏóêÎü¨ Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú (Í∞úÎ∞úÏö©)
      const dummyMessages: ChannelChatMessage[] = [
        {
          id: 1,
          channel_id: channelId,
          user_id: "1",
          user: {
            id: "1",
            nickname: "ÍπÄÍ∞úÎ∞úÏûê",
            user_email: "dev@example.com",
            profile_image: "",
          },
          message: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïù¥ Ï±ÑÎÑê Ï†ïÎßê Ïú†Ïö©ÌïòÎÑ§Ïöî üëç",
          created_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
          updated_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
        },
        {
          id: 2,
          channel_id: channelId,
          user_id: "2",
          user: {
            id: "2",
            nickname: "Î∞ïÌîÑÎ°†Ìä∏",
            user_email: "frontend@example.com",
            profile_image: "",
          },
          message: "React Í¥ÄÎ†® ÏßàÎ¨∏Ïù¥ ÏûàÎäîÎç∞ Í¥úÏ∞ÆÏùÑÍπåÏöî?",
          created_at: new Date(Date.now() - 25 * 60 * 1000).toISOString(),
          updated_at: new Date(Date.now() - 25 * 60 * 1000).toISOString(),
        },
      ];
      setChatMessages(dummyMessages);
    } finally {
      setIsLoadingMessages(false);
    }
  };

  // ÏõπÏÜåÏºì Ïó∞Í≤∞ ÏÑ§Ï†ï
  const setupWebSocketConnection = () => {
    if (!channelId || wsConnection || !session?.user) return;

    console.log("üîå ÏõπÏÜåÏºì Ïó∞Í≤∞ ÏÑ§Ï†ï ÏãúÏûë");

    const userInfo = {
      id: session.user.id,
      nickname: session.user.nickname || session.user.name || "ÏÇ¨Ïö©Ïûê",
    };

    const ws = new ChannelChatWebSocket(
      channelId,
      {
        onMessage: (message: ChannelChatMessage) => {
          console.log("üì® ÏÉà Î©îÏãúÏßÄ ÏàòÏã†:", message);
          setChatMessages((prev) => {
            // Ï§ëÎ≥µ Î©îÏãúÏßÄ Î∞©ÏßÄ
            const exists = prev.find((m) => m.id === message.id);
            if (!exists) {
              return [...prev, message];
            }
            return prev;
          });
        },

        onUserJoined: (user) => {
          console.log("üëã ÏÇ¨Ïö©Ïûê ÏûÖÏû•:", user);
          setOnlineUsers((prev) => {
            if (!prev.find((u) => u.id === user.id)) {
              return [...prev, user];
            }
            return prev;
          });
          showMessage(`${user.nickname}ÎãòÏù¥ Ï±ÑÌåÖÏóê Ï∞∏Ïó¨ÌñàÏäµÎãàÎã§.`, "info");
        },

        onUserLeft: (user) => {
          console.log("üëã ÏÇ¨Ïö©Ïûê Ìá¥Ïû•:", user);
          setOnlineUsers((prev) => prev.filter((u) => u.id !== user.id));
          showMessage(`${user.nickname}ÎãòÏù¥ Ï±ÑÌåÖÏùÑ ÎÇòÍ∞îÏäµÎãàÎã§.`, "info");
        },

        onTyping: (user) => {
          setTypingUsers((prev) => {
            if (!prev.find((u) => u.id === user.id)) {
              const newTyping = [...prev, user];
              // 3Ï¥à ÌõÑ ÌÉÄÏù¥Ìïë ÏÉÅÌÉú Ï†úÍ±∞
              setTimeout(() => {
                setTypingUsers((current) => current.filter((u) => u.id !== user.id));
              }, 3000);
              return newTyping;
            }
            return prev;
          });
        },

        onStatusChange: (status) => {
          console.log("üîÑ ÏõπÏÜåÏºì ÏÉÅÌÉú Î≥ÄÍ≤Ω:", status);
          setWsStatus(status);

          // Ïó∞Í≤∞ ÏÉÅÌÉúÏóê Îî∞Î•∏ ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞±
          switch (status) {
            case "connecting":
              showMessage("Ï±ÑÌåÖ ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ Ï§ëÏûÖÎãàÎã§...", "info");
              break;
            case "connected":
              showMessage("Ï±ÑÌåÖ ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§.", "success");
              break;
            case "disconnected":
              showMessage("Ï±ÑÌåÖ ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§.", "warning");
              setOnlineUsers([]); // Ïó∞Í≤∞ ÎÅäÏñ¥ÏßÄÎ©¥ Ïò®ÎùºÏù∏ ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï¥àÍ∏∞Ìôî
              break;
            case "error":
              showMessage("Ï±ÑÌåÖ ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", "error");
              break;
          }
        },

        onError: (error) => {
          console.error("‚ùå ÏõπÏÜåÏºì ÏóêÎü¨:", error);
          showMessage(error, "error");
        },
      },
      userInfo
    );

    // Ïó∞Í≤∞ ÏãúÎèÑ
    ws.connect();
    setWsConnection(ws);

    // Ïó∞Í≤∞ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ (30Ï¥àÎßàÎã§)
    const connectionMonitor = setInterval(() => {
      if (ws.isConnected()) {
        console.log("‚úÖ ÏõπÏÜåÏºì Ïó∞Í≤∞ ÏÉÅÌÉú ÏñëÌò∏");
      } else {
        console.warn("‚ö†Ô∏è ÏõπÏÜåÏºì Ïó∞Í≤∞ ÎÅäÏñ¥Ïßê - Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ");
        if (ws.getStatus() !== "connecting") {
          ws.connect();
        }
      }
    }, 30000);

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Î™®ÎãàÌÑ∞ÎßÅ Ï†ïÎ¶¨
    return () => {
      clearInterval(connectionMonitor);
    };
  };

  // ÏõπÏÜåÏºì Ïó∞Í≤∞ Ìï¥Ï†ú
  const disconnectWebSocket = async () => {
    if (wsConnection) {
      wsConnection.disconnect();
      setWsConnection(null);
    }

    if (channelId) {
      try {
        await leaveChannelChat(channelId);
      } catch (error) {
        console.error("Ï±ÑÎÑê ÎÇòÍ∞ÄÍ∏∞ Ïã§Ìå®:", error);
      }
    }

    setOnlineUsers([]);
    setTypingUsers([]);
  };

  // Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ°
  const handleSendMessage = async () => {
    if (!newMessage.trim() || !session?.user || !channelId) return;

    try {
      // ÏõπÏÜåÏºìÏúºÎ°ú Ïã§ÏãúÍ∞Ñ Ï†ÑÏÜ° (Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÎã§Î©¥)
      if (wsConnection && wsConnection.isConnected()) {
        wsConnection.sendMessage(newMessage.trim());
        setNewMessage("");
        return;
      }

      // ÏõπÏÜåÏºìÏù¥ ÏóÜÏúºÎ©¥ APIÎ°ú Ï†ÑÏÜ°
      console.log("üì§ APIÎ°ú Î©îÏãúÏßÄ Ï†ÑÏÜ°");
      const response = await sendChannelChatMessage(channelId, newMessage.trim());

      // ÏÑ±Í≥µÌïòÎ©¥ Î°úÏª¨ ÏÉÅÌÉúÏóê Ï∂îÍ∞Ä
      setChatMessages((prev) => [...prev, response.chatMessage]);
      setNewMessage("");

      console.log("‚úÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å");
    } catch (error) {
      console.error("‚ùå Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:", error);
      showMessage("Î©îÏãúÏßÄ Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", "error");
    }
  };

  // Ï±ÑÌåÖ Î©îÏãúÏßÄ ÏûÖÎ†• Ìï∏Îì§Îü¨
  const handleMessageKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      handleSendMessage();
    }
  };

  // Î°úÎî© Ï≤òÎ¶¨
  if (channelLoading) {
    return (
      <Box
        sx={{
          minHeight: "100vh",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          background:
            theme.palette.mode === "dark"
              ? "linear-gradient(135deg, rgba(26, 26, 46, 0.95), rgba(16, 16, 32, 0.98))"
              : "linear-gradient(135deg, #f8f9fa, #e9ecef)",
        }}
      >
        <CircularProgress
          size={60}
          sx={{
            color: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.8)" : "#1976d2",
          }}
        />
      </Box>
    );
  }

  // ÏóêÎü¨ Ï≤òÎ¶¨
  if (channelError || !channelData) {
    return <ErrorView />;
  }

  return (
    <Box
      sx={{
        minHeight: "100vh",
        background:
          theme.palette.mode === "dark"
            ? "linear-gradient(135deg, rgba(26, 26, 46, 0.95), rgba(16, 16, 32, 0.98))"
            : "linear-gradient(135deg, #f8f9fa, #e9ecef)",
        // padding: 1,
      }}
    >
      {/* Ï±ÑÎÑê Ï†ïÎ≥¥ Ìó§Îçî (MainView Ïä§ÌÉÄÏùº) */}
      <Card
        sx={{
          borderRadius: "16px",
          background:
            theme.palette.mode === "dark"
              ? "linear-gradient(135deg, rgba(26, 26, 46, 0.95) 0%, rgba(45, 48, 71, 0.95) 100%)"
              : "linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)",
          border: theme.palette.mode === "dark" ? "1px solid rgba(139, 92, 246, 0.2)" : "1px solid rgba(0, 0, 0, 0.08)",
          boxShadow:
            theme.palette.mode === "dark" ? "0 8px 32px rgba(139, 92, 246, 0.15)" : "0 8px 24px rgba(0, 0, 0, 0.08)",
          position: "relative",
          overflow: "hidden",
          // marginBottom: 3,
          "&::before": {
            content: '""',
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            height: "4px",
            background: "linear-gradient(90deg, #8b5cf6, #06b6d4)",
          },
        }}
      >
        <CardContent sx={{ p: 3 }}>
          <Box sx={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
            {/* ÏôºÏ™Ω: Ï±ÑÎÑê Ï†ïÎ≥¥ */}
            <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
              <Avatar
                sx={{
                  width: 64,
                  height: 64,
                  background: "linear-gradient(135deg, #8b5cf6, #06b6d4)",
                  fontSize: "1.5rem",
                  fontWeight: "bold",
                  boxShadow:
                    theme.palette.mode === "dark"
                      ? "0 4px 20px rgba(139, 92, 246, 0.3)"
                      : "0 4px 12px rgba(139, 92, 246, 0.2)",
                }}
              >
                {channelData.channel_name.charAt(0)}
              </Avatar>

              <Box>
                <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 0.5 }}>
                  <Typography
                    variant="h5"
                    sx={{
                      fontWeight: 700,
                      background:
                        theme.palette.mode === "dark"
                          ? "linear-gradient(135deg, #a78bfa, #22d3ee)"
                          : "linear-gradient(135deg, #8b5cf6, #06b6d4)",
                      WebkitBackgroundClip: "text",
                      WebkitTextFillColor: "transparent",
                      backgroundClip: "text",
                    }}
                  >
                    {channelData.channel_name}
                  </Typography>
                  <VerifiedIcon
                    sx={{
                      color: theme.palette.mode === "dark" ? "#22d3ee" : "#06b6d4",
                      fontSize: 20,
                    }}
                  />
                  {channelData.story_count > 50 && (
                    <Chip
                      icon={<TrendingUpIcon />}
                      label="HOT"
                      size="small"
                      sx={{
                        background: "linear-gradient(135deg, #ff6b6b, #ff8e53)",
                        color: "#ffffff",
                        fontWeight: "bold",
                      }}
                    />
                  )}
                </Box>

                <Typography
                  variant="body2"
                  sx={{
                    color: theme.palette.mode === "dark" ? "#cbd5e1" : "text.secondary",
                    mb: 1,
                    maxWidth: "500px",
                    lineHeight: 1.5,
                  }}
                >
                  {`${channelData.creator?.nickname || "ÏïåÏàòÏóÜÏùå"}ÎãòÏù¥ ÎßåÎì† Ï±ÑÎÑêÏûÖÎãàÎã§. Îã§ÏñëÌïú Ï£ºÏ†úÎ°ú ÏÜåÌÜµÌï¥Î≥¥ÏÑ∏Ïöî! üöÄ`}
                </Typography>

                <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
                  <Box sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
                    <PeopleIcon
                      sx={{
                        fontSize: 16,
                        color: theme.palette.mode === "dark" ? "#94a3b8" : "text.secondary",
                      }}
                    />
                    <Typography
                      variant="body2"
                      sx={{
                        color: theme.palette.mode === "dark" ? "#94a3b8" : "text.secondary",
                        fontWeight: 600,
                      }}
                    >
                      Íµ¨ÎèÖÏûê {formatSubscriberCount(channelData.subscriber_count)}Î™Ö
                    </Typography>
                  </Box>

                  <Box sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
                    <PersonIcon
                      sx={{
                        fontSize: 16,
                        color: theme.palette.mode === "dark" ? "#94a3b8" : "text.secondary",
                      }}
                    />
                    <Typography
                      variant="body2"
                      sx={{
                        color: theme.palette.mode === "dark" ? "#94a3b8" : "text.secondary",
                      }}
                    >
                      ÏÉùÏÑ±Ïûê: {channelData.creator?.nickname || "ÏïåÏàòÏóÜÏùå"}
                    </Typography>
                    {/* ÏÉùÏÑ±ÏûêÏóêÍ≤å Ï™ΩÏßÄ Î≥¥ÎÇ¥Í∏∞ Î≤ÑÌäº */}
                    {session?.user && channelData.creator?.nickname && session.user.id !== channelData.creator.id && (
                      <Button
                        size="small"
                        variant="outlined"
                        onClick={() => router.push(`/messages?to=${channelData.creator.nickname}`)}
                        sx={{
                          ml: 1,
                          fontSize: "0.7rem",
                          padding: "2px 8px",
                          minWidth: "auto",
                          borderColor: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.5)" : "#8b5cf6",
                          color: theme.palette.mode === "dark" ? "#a78bfa" : "#8b5cf6",
                          "&:hover": {
                            backgroundColor:
                              theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.1)" : "rgba(139, 92, 246, 0.05)",
                          },
                        }}
                      >
                        Ï™ΩÏßÄ
                      </Button>
                    )}
                  </Box>

                  <Typography
                    variant="body2"
                    sx={{
                      color: theme.palette.mode === "dark" ? "#94a3b8" : "text.secondary",
                    }}
                  >
                    Í≤åÏãúÍ∏Ä {channelData.story_count.toLocaleString()}Í∞ú
                  </Typography>
                </Box>
              </Box>
            </Box>

            {/* Ïò§Î•∏Ï™Ω: Î≤ÑÌäº Í∑∏Î¶¨Îìú */}
            <Box sx={{ display: "flex", gap: 1.5 }}>
              {/* ÏôºÏ™Ω Ïó¥: Ïã§ÏãúÍ∞Ñ Ï±ÑÌåÖ Î≤ÑÌäº */}
              <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                {/* Ïã§ÏãúÍ∞Ñ Ï±ÑÌåÖ Î≤ÑÌäº */}
                <Button
                  variant={showChat ? "contained" : "outlined"}
                  startIcon={<ChatIcon />}
                  onClick={handleChatToggle}
                  sx={{
                    borderColor: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.5)" : "#1976d2",
                    color: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.8)" : "#1976d2",
                    minWidth: "120px",
                    height: "95px",
                    fontSize: "0.875rem",
                    fontWeight: 600,
                    borderRadius: "12px",
                    transition: "all 0.3s ease",
                    ...(showChat && {
                      background: "linear-gradient(135deg, #8b5cf6, #06b6d4)",
                      color: "white",
                      "&:hover": {
                        background: "linear-gradient(135deg, #7c3aed, #0891b2)",
                      },
                    }),
                    ...(!showChat && {
                      "&:hover": {
                        transform: "translateY(-1px)",
                        backgroundColor:
                          theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.1)" : "rgba(25, 118, 210, 0.1)",
                      },
                    }),
                  }}
                >
                  {showChat ? "Ï±ÑÌåÖÏ¢ÖÎ£å" : "Ïã§ÏãúÍ∞ÑÏ±ÑÌåÖ"}
                </Button>
              </Box>

              {/* Í∞ÄÏö¥Îç∞ Ïó¥: Í≥µÏßÄÏÇ¨Ìï≠, Ï±ÑÎÑêÏ†ïÎ≥¥ - Ìï≠ÏÉÅ ÌëúÏãú */}
              <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                {/* Í≥µÏßÄÏÇ¨Ìï≠ Î≤ÑÌäº */}
                <Button
                  variant="outlined"
                  startIcon={<NotificationsIcon />}
                  onClick={() => setShowNotice(!showNotice)}
                  sx={{
                    borderColor: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.5)" : "#1976d2",
                    color: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.8)" : "#1976d2",
                    minWidth: "100px",
                    height: "60px",
                    fontSize: "0.875rem",
                    fontWeight: 600,
                    borderRadius: "12px",
                    transition: "all 0.3s ease",
                    "&:hover": {
                      transform: "translateY(-1px)",
                      backgroundColor:
                        theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.1)" : "rgba(25, 118, 210, 0.1)",
                    },
                  }}
                >
                  Í≥µÏßÄÏÇ¨Ìï≠
                </Button>

                {/* Ï±ÑÎÑê Ï†ïÎ≥¥ Î≤ÑÌäº */}
                <Button
                  variant="outlined"
                  startIcon={<PeopleIcon />}
                  onClick={() => setShowChannelInfo(!showChannelInfo)}
                  sx={{
                    borderColor: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.5)" : "#1976d2",
                    color: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.8)" : "#1976d2",
                    minWidth: "100px",
                    height: "35px",
                    fontSize: "0.875rem",
                    fontWeight: 600,
                    borderRadius: "12px",
                    transition: "all 0.3s ease",
                    "&:hover": {
                      transform: "translateY(-1px)",
                      backgroundColor:
                        theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.1)" : "rgba(25, 118, 210, 0.1)",
                    },
                  }}
                >
                  Ï±ÑÎÑêÏ†ïÎ≥¥
                </Button>
              </Box>

              {/* Ïò§Î•∏Ï™Ω Ïó¥: Íµ¨ÎèÖÌïòÍ∏∞, ÏïåÎ¶ºÎ∞õÍ∏∞ - Î°úÍ∑∏Ïù∏ÏãúÏóêÎßå ÌëúÏãú */}
              {session?.user && (
                <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                  {/* Íµ¨ÎèÖÌïòÍ∏∞ Î≤ÑÌäº */}
                  <Button
                    variant={isSubscribed ? "outlined" : "contained"}
                    onClick={handleSubscribeToggle}
                    disabled={subscribeMutation.isPending || unsubscribeMutation.isPending}
                    startIcon={
                      isSubscribed ? <StarIcon sx={{ fontSize: 20 }} /> : <PersonAddIcon sx={{ fontSize: 20 }} />
                    }
                    sx={{
                      borderRadius: "12px",
                      fontWeight: 600,
                      px: 3,
                      py: 1.5,
                      transition: "all 0.3s ease",
                      minWidth: 140,
                      height: "60px",
                      fontSize: "1rem",
                      ...(isSubscribed
                        ? {
                            color: theme.palette.mode === "dark" ? "#a78bfa" : "#8b5cf6",
                            borderColor: theme.palette.mode === "dark" ? "#a78bfa" : "#8b5cf6",
                            "&:hover": {
                              background:
                                theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.1)" : "rgba(139, 92, 246, 0.1)",
                              transform: "translateY(-2px)",
                              boxShadow:
                                theme.palette.mode === "dark"
                                  ? "0 6px 20px rgba(139, 92, 246, 0.3)"
                                  : "0 6px 16px rgba(139, 92, 246, 0.3)",
                            },
                          }
                        : {
                            background: "linear-gradient(135deg, #8b5cf6, #06b6d4)",
                            boxShadow:
                              theme.palette.mode === "dark"
                                ? "0 4px 15px rgba(139, 92, 246, 0.4)"
                                : "0 4px 12px rgba(139, 92, 246, 0.3)",
                            "&:hover": {
                              background: "linear-gradient(135deg, #7c3aed, #0891b2)",
                              boxShadow:
                                theme.palette.mode === "dark"
                                  ? "0 6px 20px rgba(139, 92, 246, 0.5)"
                                  : "0 6px 16px rgba(139, 92, 246, 0.4)",
                              transform: "translateY(-2px)",
                            },
                          }),
                    }}
                  >
                    {subscribeMutation.isPending || unsubscribeMutation.isPending ? (
                      <CircularProgress size={20} sx={{ color: "inherit" }} />
                    ) : isSubscribed ? (
                      "Íµ¨ÎèÖÏ§ë"
                    ) : (
                      "Íµ¨ÎèÖÌïòÍ∏∞"
                    )}
                  </Button>

                  {/* ÏïåÎ¶ºÎ∞õÍ∏∞ Î≤ÑÌäº */}
                  <Button
                    variant="outlined"
                    startIcon={
                      notificationSubscribeMutation.isPending || notificationUnsubscribeMutation.isPending ? (
                        <CircularProgress size={16} sx={{ color: "inherit" }} />
                      ) : isNotificationEnabled ? (
                        <NotificationsIcon />
                      ) : (
                        <NotificationsOffIcon />
                      )
                    }
                    onClick={handleNotificationToggle}
                    disabled={notificationSubscribeMutation.isPending || notificationUnsubscribeMutation.isPending}
                    sx={{
                      borderColor: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.5)" : "#1976d2",
                      color: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.8)" : "#1976d2",
                      minWidth: 140,
                      height: "35px",
                      fontSize: "0.875rem",
                      fontWeight: 600,
                      borderRadius: "12px",
                      transition: "all 0.3s ease",
                      "&:hover": {
                        transform: "translateY(-1px)",
                        backgroundColor:
                          theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.1)" : "rgba(25, 118, 210, 0.1)",
                      },
                    }}
                  >
                    {isNotificationEnabled ? "ÏïåÎ¶ºÎÅÑÍ∏∞" : "ÏïåÎ¶ºÎ∞õÍ∏∞"}
                  </Button>
                </Box>
              )}
            </Box>
          </Box>
        </CardContent>
      </Card>

      {/* Í≥µÏßÄÏÇ¨Ìï≠ Î™®Îã¨ */}
      {showNotice && (
        <Card
          sx={{
            borderRadius: "16px",
            background: theme.palette.mode === "dark" ? "rgba(30, 32, 38, 0.98)" : "rgba(255, 255, 255, 0.98)",
            backdropFilter: "blur(12px)",
            boxShadow:
              theme.palette.mode === "dark"
                ? "0 20px 40px rgba(0, 0, 0, 0.5), 0 0 20px rgba(139, 92, 246, 0.2)"
                : "0 20px 40px rgba(0, 0, 0, 0.15), 0 0 20px rgba(233, 64, 87, 0.1)",
            border:
              theme.palette.mode === "dark" ? "1px solid rgba(255, 255, 255, 0.1)" : "1px solid rgba(0, 0, 0, 0.05)",
            position: "relative",
            overflow: "hidden",
            // mb: 3,
            "&::after": {
              content: '""',
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              height: "4px",
              background: "linear-gradient(90deg, #8a2387, #e94057, #f27121)",
            },
          }}
        >
          {/* Ìó§Îçî ÏÑπÏÖò */}
          <Box sx={{ p: 3, pb: 2 }}>
            <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "flex-start", mb: 1 }}>
              {/* ÏôºÏ™Ω: Ï†úÎ™©Í≥º ÏÑ§Î™Ö */}
              <Box>
                <Typography
                  variant="h6"
                  sx={{
                    fontWeight: 700,
                    color: theme.palette.mode === "dark" ? "#ffffff" : "#1a1a2e",
                    display: "flex",
                    alignItems: "center",
                    gap: 1,
                    mb: 1,
                  }}
                >
                  <AnnouncementIcon sx={{ color: "#e94057" }} />
                  {channelData.channel_name} Ï±ÑÎÑê Í≥µÏßÄÏÇ¨Ìï≠
                </Typography>
                <Typography
                  variant="body2"
                  sx={{
                    color: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.6)" : "rgba(0, 0, 0, 0.6)",
                    fontSize: "0.875rem",
                  }}
                >
                  Ï±ÑÎÑêÏùò ÏµúÏã† Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî
                </Typography>
              </Box>

              {/* Ïò§Î•∏Ï™Ω: Í≥µÏßÄÏÇ¨Ìï≠ ÏûëÏÑ± Î≤ÑÌäº */}
              {session?.user && (
                <Button
                  onClick={handleWriteNotice}
                  variant="outlined"
                  startIcon={<EditIcon />}
                  sx={{
                    borderRadius: "12px",
                    px: 3,
                    py: 1.5,
                    background:
                      theme.palette.mode === "dark"
                        ? "linear-gradient(135deg, rgba(233, 64, 87, 0.1), rgba(242, 113, 33, 0.1))"
                        : "linear-gradient(135deg, rgba(233, 64, 87, 0.05), rgba(242, 113, 33, 0.05))",
                    border:
                      theme.palette.mode === "dark"
                        ? "1px solid rgba(233, 64, 87, 0.3)"
                        : "1px solid rgba(233, 64, 87, 0.2)",
                    color: "#e94057",
                    fontWeight: "600",
                    fontSize: "0.9rem",
                    transition: "all 0.3s ease",
                    minWidth: "160px",
                    "&:hover": {
                      background:
                        theme.palette.mode === "dark"
                          ? "linear-gradient(135deg, rgba(233, 64, 87, 0.2), rgba(242, 113, 33, 0.2))"
                          : "linear-gradient(135deg, rgba(233, 64, 87, 0.1), rgba(242, 113, 33, 0.1))",
                      transform: "translateY(-2px)",
                      boxShadow:
                        theme.palette.mode === "dark"
                          ? "0 8px 25px rgba(233, 64, 87, 0.3)"
                          : "0 8px 25px rgba(233, 64, 87, 0.2)",
                    },
                  }}
                >
                  ÏÉà Í≥µÏßÄÏÇ¨Ìï≠ ÏûëÏÑ±
                </Button>
              )}
            </Box>
          </Box>

          {/* Í≥µÏßÄÏÇ¨Ìï≠ Î™©Î°ù */}
          <Box sx={{ px: 3, pb: 3, maxHeight: "400px", overflowY: "auto" }}>
            {noticesLoading ? (
              <Box sx={{ textAlign: "center", py: 3 }}>
                <Typography
                  variant="body2"
                  sx={{
                    color: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.6)" : "rgba(0, 0, 0, 0.6)",
                    fontStyle: "italic",
                  }}
                >
                  Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...
                </Typography>
              </Box>
            ) : channelNotices.length > 0 ? (
              channelNotices.map((notice: any, index: number) => (
                <Box
                  key={notice.id}
                  onClick={() => handleNoticeClick(notice.id)}
                  sx={{
                    borderRadius: "10px",
                    p: 2,
                    mb: 1,
                    backgroundColor:
                      theme.palette.mode === "dark" ? "rgba(45, 48, 56, 0.6)" : "rgba(249, 250, 251, 0.8)",
                    border:
                      theme.palette.mode === "dark"
                        ? "1px solid rgba(255, 255, 255, 0.05)"
                        : "1px solid rgba(0, 0, 0, 0.05)",
                    transition: "all 0.3s ease",
                    cursor: "pointer",
                    "&:hover": {
                      backgroundColor:
                        theme.palette.mode === "dark" ? "rgba(55, 58, 66, 0.8)" : "rgba(233, 64, 87, 0.05)",
                      transform: "translateX(8px)",
                      boxShadow:
                        theme.palette.mode === "dark"
                          ? "0 4px 15px rgba(0, 0, 0, 0.3)"
                          : "0 4px 15px rgba(0, 0, 0, 0.1)",
                      borderColor: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.3)" : "rgba(233, 64, 87, 0.2)",
                    },
                    "&:last-child": {
                      mb: 0,
                    },
                  }}
                >
                  <Box sx={{ width: "100%" }}>
                    <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 0.5 }}>
                      <Typography
                        variant="body1"
                        sx={{
                          fontWeight: 600,
                          color: theme.palette.mode === "dark" ? "#ffffff" : "#1a1a2e",
                          fontSize: "0.95rem",
                          lineHeight: 1.3,
                        }}
                      >
                        {truncateTitle(notice.title)}
                      </Typography>
                      {isNewNotice(notice.created_at) && (
                        <Chip
                          icon={<FiberNewIcon sx={{ fontSize: "0.8rem" }} />}
                          label="NEW"
                          size="small"
                          sx={{
                            height: "22px",
                            fontSize: "0.7rem",
                            fontWeight: "bold",
                            backgroundColor: "#e94057",
                            color: "white",
                            "& .MuiChip-icon": {
                              color: "white",
                            },
                          }}
                        />
                      )}
                    </Box>
                    <Typography
                      variant="caption"
                      sx={{
                        color: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.5)",
                        fontSize: "0.8rem",
                      }}
                    >
                      {new Date(notice.created_at).toLocaleDateString("ko-KR", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                        hour: "2-digit",
                        minute: "2-digit",
                      })}
                    </Typography>
                  </Box>
                </Box>
              ))
            ) : (
              <Box sx={{ textAlign: "center", py: 4 }}>
                <AnnouncementIcon
                  sx={{
                    fontSize: "3rem",
                    color: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.3)" : "rgba(0, 0, 0, 0.3)",
                    mb: 2,
                  }}
                />
                <Typography
                  variant="body2"
                  sx={{
                    color: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.6)" : "rgba(0, 0, 0, 0.6)",
                    fontStyle: "italic",
                  }}
                >
                  Îì±Î°ùÎêú Í≥µÏßÄÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§
                </Typography>
              </Box>
            )}
          </Box>
        </Card>
      )}

      {/* Ï±ÑÎÑê Ï†ïÎ≥¥ Î™®Îã¨ */}
      {showChannelInfo && (
        <Card
          sx={{
            background: theme.palette.mode === "dark" ? "rgba(26, 26, 46, 0.95)" : "#ffffff",
            border:
              theme.palette.mode === "dark" ? "1px solid rgba(139, 92, 246, 0.4)" : "1px solid rgba(0, 0, 0, 0.1)",
            borderRadius: 3,
            p: 4,
          }}
        >
          <Typography
            variant="h6"
            sx={{
              color: theme.palette.mode === "dark" ? "#ffffff" : "#1a1a2e",
              mb: 2,
              fontWeight: 700,
              display: "flex",
              alignItems: "center",
              gap: 1,
            }}
          >
            <PeopleIcon sx={{ color: theme.palette.mode === "dark" ? "#a78bfa" : "#8b5cf6" }} />
            Ï±ÑÎÑê Ï†ïÎ≥¥
          </Typography>

          {/* Ìïú Ï§ÑÎ°ú Í∞ÑÍ≤©ÏùÑ ÎùÑÏõåÏÑú ÌëúÏãú */}
          <Typography
            variant="body1"
            sx={{
              color: theme.palette.mode === "dark" ? "#e2e8f0" : "#374151",
              textAlign: "center",
              lineHeight: 1.6,
            }}
          >
            üìÖ ÏÉùÏÑ±Ïùº:{" "}
            {new Date(channelData.created_at).toLocaleDateString("ko-KR", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })}
            &nbsp;&nbsp;&nbsp;&nbsp; üë§ ÏÉùÏÑ±Ïûê: {channelData.creator?.nickname || "ÏïåÏàòÏóÜÏùå"}
            &nbsp;&nbsp;&nbsp;&nbsp; üìä ÌÜµÍ≥Ñ: Íµ¨ÎèÖÏûê {channelData.subscriber_count.toLocaleString()}Î™Ö ¬∑ Í≤åÏãúÍ∏Ä{" "}
            {channelData.story_count.toLocaleString()}Í∞ú
          </Typography>
        </Card>
      )}

      {/* Íµ¨ÎèÖ Ï∑®ÏÜå ÌôïÏù∏ Î™®Îã¨ */}
      <Dialog
        open={showUnsubscribeConfirm}
        onClose={handleUnsubscribeCancel}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: "16px",
            background: theme.palette.mode === "dark" ? "rgba(30, 32, 38, 0.98)" : "rgba(255, 255, 255, 0.98)",
            backdropFilter: "blur(12px)",
            border:
              theme.palette.mode === "dark" ? "1px solid rgba(255, 255, 255, 0.1)" : "1px solid rgba(0, 0, 0, 0.05)",
          },
        }}
      >
        <DialogTitle
          sx={{
            fontWeight: 700,
            color: theme.palette.mode === "dark" ? "#ffffff" : "#1a1a2e",
            display: "flex",
            alignItems: "center",
            gap: 1,
            pb: 1,
          }}
        >
          <PersonIcon sx={{ color: "#e94057" }} />
          Íµ¨ÎèÖ Ï∑®ÏÜå ÌôïÏù∏
        </DialogTitle>

        <DialogContent sx={{ mt: 1, mb: -1 }}>
          <Typography
            variant="body1"
            sx={{
              color: theme.palette.mode === "dark" ? "#e2e8f0" : "#374151",
              lineHeight: 1.6,
              textAlign: "center",
            }}
          >
            <strong>{channelData.channel_name}</strong> Ï±ÑÎÑêÏùò Íµ¨ÎèÖÏùÑ Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå?
          </Typography>
          <Typography
            variant="body2"
            sx={{
              color: theme.palette.mode === "dark" ? "#94a3b8" : "#6b7280",
              mt: 1,
              textAlign: "center",
            }}
          >
            Íµ¨ÎèÖÏùÑ Ï∑®ÏÜåÌïòÎ©¥ ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏Ä ÏïåÎ¶ºÏùÑ Î∞õÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.
          </Typography>
        </DialogContent>

        <DialogActions sx={{ px: 3, pb: 3, gap: 1, justifyContent: "center" }}>
          <Button
            onClick={handleUnsubscribeCancel}
            variant="outlined"
            sx={{
              borderRadius: "12px",
              px: 3,
              py: 1,
              borderColor: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.3)" : "rgba(0, 0, 0, 0.3)",
              color: theme.palette.mode === "dark" ? "#e2e8f0" : "#374151",
              "&:hover": {
                backgroundColor: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.05)" : "rgba(0, 0, 0, 0.05)",
              },
            }}
          >
            ÏïÑÎãàÏò§
          </Button>

          <Button
            onClick={handleUnsubscribeConfirm}
            variant="contained"
            disabled={unsubscribeMutation.isPending}
            sx={{
              borderRadius: "12px",
              px: 3,
              py: 1,
              background: "linear-gradient(135deg, #e94057, #f27121)",
              color: "white",
              fontWeight: 600,
              "&:hover": {
                background: "linear-gradient(135deg, #dc2626, #ea580c)",
              },
              "&:disabled": {
                background: "rgba(233, 64, 87, 0.5)",
              },
            }}
          >
            {unsubscribeMutation.isPending ? <CircularProgress size={20} sx={{ color: "inherit" }} /> : "Ïòà, Íµ¨ÎèÖ Ï∑®ÏÜå"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò - Ï±ÑÌåÖ Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå ÌëúÏãú */}
      {!showChat && (
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            width: "100%",
            borderRadius: 2,
            boxShadow:
              theme.palette.mode === "dark" ? "0 4px 20px rgba(139, 92, 246, 0.15)" : "0 4px 12px rgba(0,0,0,0.08)",
            overflow: "hidden",
            bgcolor: theme.palette.mode === "dark" ? "rgba(26, 26, 46, 0.95)" : "background.paper",
            border: theme.palette.mode === "dark" ? "1px solid rgba(139, 92, 246, 0.3)" : "none",
            // marginBottom: 3,
          }}
        >
          <Tabs
            value={currentTab}
            onChange={handleTabChange}
            textColor="secondary"
            indicatorColor="secondary"
            aria-label="channel tabs"
            variant="scrollable"
            scrollButtons="auto"
            sx={{
              flexGrow: 1,
              "& .MuiTab-root": {
                fontWeight: 600,
                fontSize: "1rem",
                py: 2,
                px: 3,
                transition: "all 0.2s ease",
                color: theme.palette.mode === "dark" ? "#e2e8f0" : "inherit",
                "&:hover": {
                  backgroundColor:
                    theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.1)" : "rgba(156, 39, 176, 0.04)",
                  color: theme.palette.mode === "dark" ? "#a78bfa" : "secondary.dark",
                },
                "&.Mui-selected": {
                  color: theme.palette.mode === "dark" ? "#a78bfa" : "secondary.main",
                  fontWeight: 700,
                },
              },
              "& .MuiTabs-indicator": {
                height: 3,
                borderTopLeftRadius: 3,
                borderTopRightRadius: 3,
                backgroundColor: theme.palette.mode === "dark" ? "#8b5cf6" : undefined,
              },
            }}
          >
            {TAB_SELECT_OPTIONS.filter((option) => option.value !== "suggestion").map((option) => (
              <Tab key={option.value} icon={option.icon} label={option.name} value={option.value} />
            ))}
          </Tabs>

          {/* Î∑∞ Î™®Îìú ÌÜ†Í∏Ä Î≤ÑÌäº - Ï±ÑÌåÖ Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå ÌëúÏãú */}
          {!showChat && (
            <>
              <IconButton
                onClick={() => handleViewModeChange("table")}
                color={viewMode === "table" ? "primary" : "default"}
                sx={{ ml: 2 }}
                aria-label="table view"
              >
                <ViewListIcon sx={{ fontSize: 32 }} />
              </IconButton>
              <IconButton
                onClick={() => handleViewModeChange("card")}
                color={viewMode === "card" ? "primary" : "default"}
                sx={{ ml: 1 }}
                aria-label="card view"
              >
                <ViewModuleIcon sx={{ fontSize: 32 }} />
              </IconButton>
            </>
          )}

          {/* Í∏ÄÏì∞Í∏∞ Î≤ÑÌäº */}
          {session?.user && (
            <Button
              variant="contained"
              startIcon={<CreateIcon />}
              onClick={handleWritePost}
              sx={{
                background:
                  theme.palette.mode === "dark"
                    ? "linear-gradient(135deg, rgba(139, 92, 246, 0.8), rgba(6, 182, 212, 0.8))"
                    : "linear-gradient(135deg, #1976d2, #42a5f5)",
                "&:hover": {
                  background:
                    theme.palette.mode === "dark"
                      ? "linear-gradient(135deg, rgba(139, 92, 246, 1), rgba(6, 182, 212, 1))"
                      : "linear-gradient(135deg, #1565c0, #1976d2)",
                },
                boxShadow:
                  theme.palette.mode === "dark"
                    ? "0 0 20px rgba(139, 92, 246, 0.4)"
                    : "0 4px 12px rgba(25, 118, 210, 0.3)",
                ml: 1,
                mr: 2,
              }}
            >
              Í∏ÄÏì∞Í∏∞
            </Button>
          )}
        </Box>
      )}

      {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† - Ï±ÑÌåÖ Î™®ÎìúÏôÄ Í∏∞Î≥∏ Î™®Îìú Ï†ÑÌôò */}
      {showChat ? (
        /* Ï±ÑÌåÖ UI */
        <Box
          sx={{
            background: theme.palette.mode === "dark" ? "rgba(26, 26, 46, 0.95)" : "#ffffff",
            border:
              theme.palette.mode === "dark" ? "1px solid rgba(139, 92, 246, 0.3)" : "1px solid rgba(0, 0, 0, 0.08)",
            borderRadius: 2,
            boxShadow:
              theme.palette.mode === "dark" ? "0 4px 20px rgba(139, 92, 246, 0.15)" : "0 4px 12px rgba(0,0,0,0.08)",
            height: "calc(100vh - 200px)",
            display: "flex",
            flexDirection: "column",
            overflow: "hidden",
          }}
        >
          {/* Ï±ÑÌåÖ Ìó§Îçî */}
          <Box
            sx={{
              p: 2,
              borderBottom:
                theme.palette.mode === "dark" ? "1px solid rgba(255, 255, 255, 0.1)" : "1px solid rgba(0, 0, 0, 0.08)",
              background:
                theme.palette.mode === "dark"
                  ? "linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(6, 182, 212, 0.1))"
                  : "linear-gradient(135deg, rgba(139, 92, 246, 0.05), rgba(6, 182, 212, 0.05))",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <ChatIcon
              sx={{
                color: theme.palette.mode === "dark" ? "#a78bfa" : "#8b5cf6",
                fontSize: 24,
                mr: 1,
              }}
            />
            <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center" }}>
              <Typography
                variant="h6"
                sx={{
                  fontWeight: 700,
                  background:
                    theme.palette.mode === "dark"
                      ? "linear-gradient(135deg, #a78bfa, #22d3ee)"
                      : "linear-gradient(135deg, #8b5cf6, #06b6d4)",
                  WebkitBackgroundClip: "text",
                  WebkitTextFillColor: "transparent",
                  backgroundClip: "text",
                }}
              >
                {channelData.channel_name} Ï±ÑÎÑê ÏûêÏú†Ï±ÑÌåÖ
              </Typography>

              {/* Ïó∞Í≤∞ ÏÉÅÌÉú Î∞è Ïò®ÎùºÏù∏ ÏÇ¨Ïö©Ïûê ÌëúÏãú */}
              <Box sx={{ display: "flex", alignItems: "center", gap: 2, mt: 0.5 }}>
                <Box sx={{ display: "flex", alignItems: "center", gap: 0.5 }}>
                  <Box
                    sx={{
                      width: 8,
                      height: 8,
                      borderRadius: "50%",
                      backgroundColor:
                        wsStatus === "connected" ? "#22c55e" : wsStatus === "connecting" ? "#f59e0b" : "#ef4444",
                      boxShadow: `0 0 8px ${
                        wsStatus === "connected" ? "#22c55e" : wsStatus === "connecting" ? "#f59e0b" : "#ef4444"
                      }`,
                    }}
                  />
                  <Typography
                    variant="caption"
                    sx={{
                      color: theme.palette.mode === "dark" ? "#94a3b8" : "#6b7280",
                      fontSize: "0.75rem",
                    }}
                  >
                    {wsStatus === "connected"
                      ? "Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞Îê®"
                      : wsStatus === "connecting"
                        ? "Ïó∞Í≤∞ Ï§ë..."
                        : "Ïó∞Í≤∞ ÎÅäÍπÄ"}
                  </Typography>
                </Box>

                {onlineUsers.length > 0 && (
                  <Typography
                    variant="caption"
                    sx={{
                      color: theme.palette.mode === "dark" ? "#94a3b8" : "#6b7280",
                      fontSize: "0.75rem",
                    }}
                  >
                    Ïò®ÎùºÏù∏: {onlineUsers.length}Î™Ö
                  </Typography>
                )}
              </Box>
            </Box>
          </Box>

          {/* Ï±ÑÌåÖ Î©îÏãúÏßÄ Î™©Î°ù */}
          <Box
            sx={{
              flexGrow: 1,
              overflow: "hidden",
              display: "flex",
              flexDirection: "column",
            }}
          >
            <List
              sx={{
                flexGrow: 1,
                overflow: "auto",
                py: 1,
                px: 0,
                "&::-webkit-scrollbar": {
                  width: "6px",
                },
                "&::-webkit-scrollbar-track": {
                  background: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.1)" : "rgba(0, 0, 0, 0.1)",
                  borderRadius: "6px",
                },
                "&::-webkit-scrollbar-thumb": {
                  background: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.5)" : "rgba(139, 92, 246, 0.3)",
                  borderRadius: "6px",
                  "&:hover": {
                    background: theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.7)" : "rgba(139, 92, 246, 0.5)",
                  },
                },
              }}
            >
              {chatMessages.length === 0 ? (
                <Box sx={{ textAlign: "center", py: 6 }}>
                  <ChatIcon
                    sx={{
                      fontSize: "4rem",
                      color: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.3)" : "rgba(0, 0, 0, 0.3)",
                      mb: 2,
                    }}
                  />
                  <Typography
                    variant="h6"
                    sx={{
                      color: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.6)" : "rgba(0, 0, 0, 0.6)",
                      mb: 1,
                      fontWeight: 600,
                    }}
                  >
                    Ï≤´ Î©îÏãúÏßÄÎ•º ÎÇ®Í≤®Î≥¥ÏÑ∏Ïöî!
                  </Typography>
                  <Typography
                    variant="body2"
                    sx={{
                      color: theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.4)" : "rgba(0, 0, 0, 0.4)",
                      fontStyle: "italic",
                    }}
                  >
                    Ïù¥ Ï±ÑÎÑêÏùò Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§Í≥º ÏûêÏú†Î°≠Í≤å ÎåÄÌôîÌï¥Î≥¥ÏÑ∏Ïöî
                  </Typography>
                </Box>
              ) : (
                chatMessages.map((message, index) => (
                  <React.Fragment key={message.id}>
                    <ListItem
                      alignItems="flex-start"
                      sx={{
                        px: 3,
                        py: 2,
                        transition: "all 0.2s ease",
                        "&:hover": {
                          backgroundColor:
                            theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.02)" : "rgba(0, 0, 0, 0.02)",
                        },
                      }}
                    >
                      <ListItemAvatar sx={{ minWidth: 56 }}>
                        <Avatar
                          sx={{
                            width: 44,
                            height: 44,
                            background: "linear-gradient(135deg, #8b5cf6, #06b6d4)",
                            fontSize: "1rem",
                            fontWeight: "bold",
                            boxShadow:
                              theme.palette.mode === "dark"
                                ? "0 2px 8px rgba(139, 92, 246, 0.3)"
                                : "0 2px 8px rgba(139, 92, 246, 0.2)",
                          }}
                          src={message.user.profile_image}
                        >
                          {message.user.nickname.charAt(0)}
                        </Avatar>
                      </ListItemAvatar>
                      <ListItemText
                        primary={
                          <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 0.5 }}>
                            <Typography
                              variant="subtitle1"
                              sx={{
                                fontWeight: 700,
                                color: theme.palette.mode === "dark" ? "#e2e8f0" : "#374151",
                                fontSize: "1rem",
                              }}
                            >
                              {message.user.nickname}
                            </Typography>
                            <Typography
                              variant="caption"
                              sx={{
                                color: theme.palette.mode === "dark" ? "#94a3b8" : "#6b7280",
                                fontSize: "0.8rem",
                                backgroundColor:
                                  theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.05)" : "rgba(0, 0, 0, 0.05)",
                                px: 1,
                                py: 0.25,
                                borderRadius: "8px",
                              }}
                            >
                              {new Date(message.created_at).toLocaleTimeString("ko-KR", {
                                hour: "2-digit",
                                minute: "2-digit",
                              })}
                            </Typography>
                          </Box>
                        }
                        secondary={
                          <Typography
                            variant="body1"
                            sx={{
                              color: theme.palette.mode === "dark" ? "#cbd5e1" : "#4b5563",
                              lineHeight: 1.5,
                              wordBreak: "break-word",
                              whiteSpace: "pre-wrap",
                              fontSize: "0.95rem",
                              mt: 0.5,
                            }}
                          >
                            {message.message}
                          </Typography>
                        }
                      />
                    </ListItem>
                    {index < chatMessages.length - 1 && (
                      <Divider
                        sx={{
                          mx: 3,
                          borderColor:
                            theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.05)" : "rgba(0, 0, 0, 0.05)",
                        }}
                      />
                    )}
                  </React.Fragment>
                ))
              )}
            </List>

            {/* Î©îÏãúÏßÄ ÏûÖÎ†• ÏòÅÏó≠ */}
            <Box
              sx={{
                p: 3,
                borderTop:
                  theme.palette.mode === "dark"
                    ? "1px solid rgba(255, 255, 255, 0.1)"
                    : "1px solid rgba(0, 0, 0, 0.08)",
                background:
                  theme.palette.mode === "dark"
                    ? "linear-gradient(135deg, rgba(139, 92, 246, 0.05), rgba(6, 182, 212, 0.05))"
                    : "linear-gradient(135deg, rgba(139, 92, 246, 0.02), rgba(6, 182, 212, 0.02))",
              }}
            >
              <TextField
                fullWidth
                multiline
                maxRows={4}
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyPress={handleMessageKeyPress}
                placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî... (Enter: Ï†ÑÏÜ°, Shift+Enter: Ï§ÑÎ∞îÍøà)"
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "16px",
                    background:
                      theme.palette.mode === "dark" ? "rgba(255, 255, 255, 0.05)" : "rgba(255, 255, 255, 0.9)",
                    fontSize: "1rem",
                    "& fieldset": {
                      borderColor:
                        theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.3)" : "rgba(139, 92, 246, 0.2)",
                    },
                    "&:hover fieldset": {
                      borderColor:
                        theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.5)" : "rgba(139, 92, 246, 0.4)",
                    },
                    "&.Mui-focused fieldset": {
                      borderColor: theme.palette.mode === "dark" ? "#a78bfa" : "#8b5cf6",
                      borderWidth: "2px",
                    },
                  },
                  "& .MuiInputBase-input": {
                    color: theme.palette.mode === "dark" ? "#e2e8f0" : "#374151",
                    fontSize: "1rem",
                    py: 1.5,
                  },
                  "& .MuiInputBase-input::placeholder": {
                    color: theme.palette.mode === "dark" ? "#94a3b8" : "#6b7280",
                    opacity: 1,
                  },
                }}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={handleSendMessage}
                        disabled={!newMessage.trim()}
                        sx={{
                          color: theme.palette.mode === "dark" ? "#a78bfa" : "#8b5cf6",
                          background:
                            theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.1)" : "rgba(139, 92, 246, 0.05)",
                          borderRadius: "12px",
                          p: 1,
                          "&:hover": {
                            background:
                              theme.palette.mode === "dark" ? "rgba(139, 92, 246, 0.2)" : "rgba(139, 92, 246, 0.1)",
                            transform: "scale(1.05)",
                          },
                          "&:disabled": {
                            color: theme.palette.mode === "dark" ? "#4a5568" : "#a0aec0",
                            background: "transparent",
                          },
                        }}
                      >
                        <SendIcon />
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
              />
            </Box>
          </Box>
        </Box>
      ) : (
        /* Í∏∞Î≥∏ ÌÉ≠ + ÌÖåÏù¥Î∏î UI */
        <>
          {/* Í≤åÏãúÍ∏Ä Î™©Î°ù */}
          {currentLoading && !currentData ? (
            <Loading />
          ) : viewMode === "card" ? (
            <CustomizedCardView tableData={sortedTableData} onRowClick={handlePostClick} />
          ) : (
            <CustomizedTables tableData={sortedTableData} onRowClick={handlePostClick} />
          )}

          {/* Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ (Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùÑ ÎïåÎäî ÏûëÏùÄ Î°úÎî© ÌëúÏãú) */}
          {currentLoading && currentData && (
            <Box sx={{ display: "flex", justifyContent: "center", py: 1 }}>
              <Typography variant="caption" sx={{ color: "text.secondary" }}>
                Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...
              </Typography>
            </Box>
          )}

          {/* ÌïòÎã® Ïª®Ìä∏Î°§ ÏòÅÏó≠ (MainView Ïä§ÌÉÄÏùº) */}
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              mt: 2,
              height: "35px",
            }}
          >
            {/* ÏôºÏ™Ω: Ï†ïÎ†¨ ÏòµÏÖòÍ≥º Ï∂îÏ≤ú Îû≠ÌÇπ Î≤ÑÌäº */}
            <Box sx={{ flex: 1, display: "flex", gap: 1 }}>
              <FormControl size="small">
                <Select value={sortOrder} onChange={handleSortChange}>
                  <MenuItem value="recent">ÏµúÏã†Ïàú</MenuItem>
                  <MenuItem value="view">Ï°∞ÌöåÏàú</MenuItem>
                  <MenuItem value="recommend">Ï∂îÏ≤úÏàú</MenuItem>
                </Select>
              </FormControl>
              <Button
                variant="contained"
                startIcon={<EmojiEventsIcon sx={{ fontSize: 24, color: "rgba(255, 255, 255, 0.8)" }} />}
                sx={{
                  backgroundImage:
                    theme.palette.mode === "dark"
                      ? "linear-gradient(45deg, #8b5cf6, #06b6d4)"
                      : "linear-gradient(45deg, #ff9800, #f77d58)",
                  color: "white",
                  fontWeight: "bold",
                  borderRadius: "8px",
                  padding: "8px 16px",
                  boxShadow:
                    theme.palette.mode === "dark"
                      ? "0px 4px 15px rgba(139, 92, 246, 0.4)"
                      : "0px 4px 10px rgba(0,0,0,0.2)",
                  "&:hover": {
                    backgroundImage:
                      theme.palette.mode === "dark"
                        ? "linear-gradient(45deg, #7c3aed, #0891b2)"
                        : "linear-gradient(45deg, #e65100, #bf360c)",
                    boxShadow: theme.palette.mode === "dark" ? "0px 6px 20px rgba(139, 92, 246, 0.6)" : undefined,
                    transform: theme.palette.mode === "dark" ? "translateY(-1px)" : undefined,
                  },
                }}
                onClick={toggleRecommendRanking}
              >
                {recommendRankingMode ? "Ï∂îÏ≤ú Îû≠ÌÇπ Ìï¥Ï†ú" : "Ï∂îÏ≤ú Îû≠ÌÇπ"}
              </Button>
            </Box>

            {/* Í∞ÄÏö¥Îç∞: ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
            <Box sx={{ display: "flex", justifyContent: "center", flex: 1 }}>
              <Pagination
                pageCount={Math.ceil(currentTotal / viewCount)}
                onPageChange={handlePageClick}
                currentPage={currentPage}
              />
            </Box>

            {/* Ïò§Î•∏Ï™Ω: Ïó¨Î∞± */}
            <Box sx={{ flex: 1 }} />
          </Box>

          {/* Í≤ÄÏÉâÎ∞î */}
          <Box sx={{ display: "flex", justifyContent: "center", mt: 2, mb: 2 }}>
            <SearchBar
              onSearch={handleSearch}
              onClearSearch={handleClearSearch}
              currentQuery={searchParamsState?.query || ""}
              currentCategory={searchParamsState?.type || "all"}
            />
          </Box>
        </>
      )}
    </Box>
  );
};

export default ChannelDetailPage;
