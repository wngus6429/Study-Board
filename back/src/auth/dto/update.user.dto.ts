/**
 * ✏️ 사용자 정보 업데이트 데이터 전송 객체 (Update User DTO)
 *
 * 사용자 프로필 정보 업데이트 시 클라이언트에서 서버로 전송되는 데이터의 구조와 유효성 검증 규칙을 정의합니다.
 *
 * 주요 기능:
 * - 사용자 프로필 업데이트 정보 정의
 * - 입력 데이터 유효성 검증 (형식, 길이, 패턴)
 * - 기존 사용자 식별을 위한 ID 포함
 * - 보안을 위한 데이터 검증 규칙
 *
 * 업데이트 가능 정보:
 * - 이메일 주소 (변경 시 중복 체크 필요)
 * - 닉네임 (표시명 변경)
 * - 비밀번호 (보안 정보 변경)
 * - 프로필 이미지 (별도 파일 업로드)
 *
 * @note
 * 실제 구현에서는 보안상 이메일과 비밀번호 변경은 별도 엔드포인트에서 처리하는 것이 권장됩니다.
 * 현재는 주로 닉네임과 프로필 이미지 업데이트에 사용됩니다.
 *
 * @author Study-Board Team
 * @version 1.0.0
 */

import { IsNotEmpty, Matches, MaxLength, MinLength } from 'class-validator';
import { Column, Entity, PrimaryColumn, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class UpdateUserDto {
  // ═══════════════════════════════════════════════════════════════════════════════════════
  // 🆔 사용자 고유 식별자 (업데이트 대상 식별)
  // ═══════════════════════════════════════════════════════════════════════════════════════

  /**
   * 업데이트할 사용자의 고유 식별자 (UUID)
   *
   * @description
   * - 업데이트 대상 사용자를 식별하는 고유 ID
   * - JWT 토큰에서 추출된 사용자 ID와 일치해야 함
   * - 다른 사용자의 정보를 변경하는 것을 방지
   *
   * @security
   * - 인증된 사용자의 ID와 일치 여부 검증 필요
   * - 권한 없는 사용자의 정보 변경 방지
   *
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  @PrimaryGeneratedColumn('uuid')
  @Column({ type: 'char', length: 36 })
  id: string;

  // ═══════════════════════════════════════════════════════════════════════════════════════
  // 📧 이메일 주소 (선택적 업데이트)
  // ═══════════════════════════════════════════════════════════════════════════════════════

  /**
   * 사용자 이메일 주소 (업데이트용)
   *
   * @description
   * - 새로운 이메일 주소로 변경 시 사용
   * - 중복 이메일 체크 필요
   * - 이메일 인증 프로세스 권장
   *
   * @validation
   * - 필수 입력 (@IsNotEmpty)
   * - 최소 4자 이상 (@MinLength)
   * - 최대 30자 이하 (@MaxLength)
   * - 이메일 형식 검증 (@Matches)
   *
   * @security
   * - 이메일 변경 시 기존 이메일로 알림 발송 권장
   * - 이메일 인증 후 변경 적용 권장
   * - 중복 이메일 사용 방지
   *
   * @example "newemail@example.com"
   * @error "이메일 형식이 아님, Email Address Damn ass"
   *
   * @todo 실제 구현에서는 별도 이메일 변경 엔드포인트 사용 권장
   */
  @IsNotEmpty()
  @MinLength(4)
  @MaxLength(30)
  @Matches(/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/, {
    message: '이메일 형식이 아님, Email Address Damn ass',
  })
  user_email: string;

  // ═══════════════════════════════════════════════════════════════════════════════════════
  // 👤 사용자 닉네임 (주요 업데이트 대상)
  // ═══════════════════════════════════════════════════════════════════════════════════════

  /**
   * 사용자 닉네임 (업데이트용)
   *
   * @description
   * - 가장 자주 업데이트되는 사용자 정보
   * - 게시글, 댓글 등에 표시되는 이름 변경
   * - 즉시 적용되어 다른 사용자들에게 보여짐
   *
   * @validation
   * - 필수 입력 (@IsNotEmpty)
   * - 최소 2자 이상 (@MinLength)
   * - 최대 20자 이하 (@MaxLength)
   * - 특수문자 제한 (한글, 영문, 숫자 권장)
   *
   * @usage
   * - 프로필 페이지에서 닉네임 변경
   * - 실시간으로 변경 사항 반영
   * - 기존 게시글/댓글의 작성자명도 업데이트
   *
   * @example "새로운닉네임", "UpdatedUser", "변경된이름"
   */
  @IsNotEmpty()
  @MinLength(2)
  @MaxLength(20)
  nickname: string;

  // ═══════════════════════════════════════════════════════════════════════════════════════
  // 🔒 비밀번호 (보안 업데이트)
  // ═══════════════════════════════════════════════════════════════════════════════════════

  /**
   * 사용자 비밀번호 (업데이트용)
   *
   * @description
   * - 새로운 비밀번호로 변경 시 사용
   * - 현재 비밀번호 확인 후 변경 권장
   * - 서버에서 해싱 처리되어 저장
   *
   * @validation
   * - 필수 입력 (@IsNotEmpty)
   * - 최소 4자 이상 (@MinLength)
   * - 최대 20자 이하 (@MaxLength)
   * - 영숫자만 허용 (@Matches)
   *
   * @security
   * - 현재 비밀번호 확인 필수
   * - 새 비밀번호 해싱 처리
   * - 비밀번호 변경 시 모든 세션 무효화 권장
   * - 비밀번호 변경 알림 발송 권장
   *
   * @example "newPassword123", "updatedPass456"
   * @error "영숫자, Password can only contain letters and numbers"
   *
   * @todo 실제 구현에서는 별도 비밀번호 변경 엔드포인트 사용 권장
   */
  @IsNotEmpty()
  @MinLength(4)
  @MaxLength(20)
  @Matches(/^[A-Za-z0-9]*$/, {
    message: '영숫자, Password can only contain letters and numbers',
  })
  password: string;
}
